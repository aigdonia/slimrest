{"name":"Slimrest","tagline":"RESTful API scaffold based on PHP slimframework3.0","body":"# slimrest RESTful API scaffold\r\n## based on slimframework3.0\r\n\r\nthis project provides scaffold for your next RESTful API.\r\n\r\n## Additional Tools\r\n\r\nThis scaffold mashes additional libraries to get in shape, it uses [PHPActiveRecord ORM](http://www.phpactiverecord.org/) library for database manipulation, and uses [JWT](http://jwt.io/) for authentication/authorization with frontend.\r\n\r\nAdditional resources and tutorials based on the scaffold will be available here soon.\r\n\r\n## Easy to start\r\n 1. download the code or fork it to your github account.\r\n 2. install dependencies by running `./composer.phar install`\r\n\r\n **note** use your own composer install if you already have one\r\n 3. update config.php file to meet your system requirements.\r\n 4. run through your http php-enabled server, for quick starts, run `php -S localhost:9001` from your terminal inside project directory to have quick up and running development instance.\r\n\r\n **tip** Don't use this way in production, deploy in reliable webserver\r\n\r\n## Getting Started\r\n\r\n### 1. Configure The Database Connection\r\nThis scaffold uses [PHPActiveRecord](http://www.phpactiverecord.org/) to handle database connectivity and manipulation, I've PHPActiveRecord for 3 years, and it is really quick awesome solution if you still using the `mysqli` or `PDO`, give it a look.\r\n\r\nConfiguration is straight in this scaffold, edit your `/config.php` file to add as many connections as you want,\r\n\r\n**Note** that the `'development'` connection is **mandatory** to be there unless you set the system environment variable `'LIS_ENV'` to whatever connection name you want.\r\n\r\nConnection string is formatted like:\r\n\r\n`<DB_DRIVER>://<USER>:<PASS>@<DB_SERVER>/<DB_NAME>`\r\n\r\nfor example `mysql://root:root@localhost/database`.\r\n\r\n`models_dir` configuration key is critical for PHPActiveRecord to find the model classes, it is set by default to `app/Model`.\r\n\r\n**Note**  if you are going to change where your models will be, point this location to where you are going to place all your models classes\r\n\r\n### 2. Create Your First Route\r\nThis scaffold uses the term `Resource` to describe a single Entity or a Module in your system, you are free to divide your system into Resources, each Resource in your system should be included in the directory `Resource` and should extend the abstract class `\\SlimRest\\Resource`.\r\n\r\nImplement the method `routes` in your own Resource subclass by adding your routes.\r\n\r\n```php\r\n<?php\r\n\tnamespace SlimRest\\Resource;\r\n\tuse \\SlimRest\\Resource as Resource;\r\n\tclass Auth extends Resource{\r\n\t public function routes(){\r\n\t\t $this->get('/login', [$this, 'doLogin']);\r\n\t\t $this->post('/login', [$this, 'postLogin']);\r\n\t\t ...\r\n\t }\r\n\r\n\t public function doLogin($req, $res, $args){\r\n\t\t ...\r\n\t\t return $this->respond($res, ... );\r\n\t }\r\n\r\n\t public function postLogin($req, $res, $args){\r\n\t\t ...\r\n\t }\r\n\t}\r\n\r\n```\r\n### 3. Register Resource in your index file\r\nlast thing to do is to register your created resource by creating new instance in `/index.php`\r\n```php\r\n\tnew \\SlimRest\\Resource\\Auth();\r\n```\r\n\r\nTry accessing your routes through web browser or Postman\r\n\r\nTutorials will be available soon here.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}